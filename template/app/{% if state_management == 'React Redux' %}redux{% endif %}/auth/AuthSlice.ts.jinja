import {
  createSlice,
  type ActionReducerMapBuilder,
  type Draft,
  type PayloadAction
} from '@reduxjs/toolkit';
{% if state_management_middleware == 'Redux Saga' %}
import { ErrorPayload, SuccessPayload } from '@configs';
{% endif %}
{% if state_management_middleware == 'Redux Thunk' %}
import {
  ErrorPayload,
  SuccessPayload,
  axiosApiWithCancelToken,
  createAsyncThunkWithCancelToken
} from '@configs';
import { APISuffixURLConst, ToolkitActionConst, AxiosMethodConst } from '@constants';
{% endif %}
import { UserResponse, SignInRequest } from '@models';
import { AppRequestActions } from '../app-request';
import INITIAL_STATE, { type AuthStateType } from './AuthInitial';

{% if state_management_middleware == 'Redux Thunk' %}
/**
 * Creates an async thunk action creator that will dispatch actions to the reducer and will sign in the user.
 * @param {string} [typePrefix='auth/signIn'] - The prefix for the thunk type.
 * @param {Method} [method='post'] - Method - the HTTP method to use POST.
 * @param {string} [url='/login'] - The url of the signIn endpoint.
 * @returns {UserResponse} - the response from the server.
 */
const signInRequest = createAsyncThunkWithCancelToken<SignInRequest, UserResponse>(
  ToolkitActionConst.signIn,
  (request) => {
    return axiosApiWithCancelToken(AxiosMethodConst.post, APISuffixURLConst.signIn, {
      isUnauthorized: true,
      data: request.plainRequest
      // TODO: You can change content type like below
      // setting: {
      //   headers: { 'Content-Type': 'multipart/form-data', Accept: 'multipart/form-data' }
      // }
    });
  }
);
{% endif %}
/**
 * Creating a auth slice of the redux store
 * @param {AuthStateType} state - The current state of the auth reducer.
 * @param {Action} action - The action to handle.
 * @returns {AuthStateType} The new state of the auth reducer.
 */
const authSlice = createSlice({
  name: 'auth',
  initialState: INITIAL_STATE,
  reducers: {
    {% if state_management_middleware == 'Redux Saga' -%}
    signInRequest: (
      state: Draft<AuthStateType>,
      _action: PayloadAction<SignInRequest | undefined>
    ) => {
      state.loading = true;
    },
    signInRequestCancel: () => {},
    signInSuccess: (
      state: Draft<AuthStateType>,
      action: PayloadAction<SuccessPayload<SignInRequest, UserResponse> | null | undefined>
    ) => {
      state.loading = false;
      state.user = action.payload?.response;
    },
    signInFailure: (
      state: Draft<AuthStateType>,
      action: PayloadAction<ErrorPayload<SignInRequest, UserResponse> | null | undefined>
    ) => {
      state.loading = false;
      state.error = action.payload?.error;
    }
  {% endif %}
  },
  extraReducers: (builder: ActionReducerMapBuilder<AuthStateType>) => {
    {% if state_management_middleware == 'Redux Saga' -%}
    builder.addCase(AppRequestActions.cleanAction, (state: Draft<AuthStateType>) => {
      state.loading = INITIAL_STATE.loading;
      state.error = INITIAL_STATE.error;
      state.user = INITIAL_STATE.user;
    });
  {% endif -%}
    {% if state_management_middleware == 'Redux Thunk' -%}
    builder
      .addCase(AppRequestActions.cleanAction, (state: Draft<AuthStateType>) => {
        state.loading = INITIAL_STATE.loading;
        state.error = INITIAL_STATE.error;
        state.user = INITIAL_STATE.user;
      })
      .addCase(signInRequest.pending, (state: Draft<AuthStateType>) => {
        state.loading = true;
      })
      .addCase(
        signInRequest.fulfilled,
        (
          state: Draft<AuthStateType>,
          action: PayloadAction<SuccessPayload<SignInRequest, UserResponse> | null | undefined>
        ) => {
          state.loading = false;
          state.user = action.payload?.response;
        }
      )
      .addCase(
        signInRequest.rejected,
        (
          state: Draft<AuthStateType>,
          action: PayloadAction<ErrorPayload<SignInRequest, UserResponse> | null | undefined>
        ) => {
          state.loading = false;
          state.error = action.payload?.error;
        }
      );
  {% endif -%}
  }
});

/* Exporting the reducer function that will be used in the root reducer. */
export const AuthReducer = authSlice.reducer;

/**
 * Creates an object with all of the actions for the auth slice.
 * @returns {Object} - An object with all of the actions for the auth slice.
 */
export const AuthActions = { ...authSlice.actions{% if state_management_middleware == 'Redux Thunk' -%}, signInRequest{% endif %} };
