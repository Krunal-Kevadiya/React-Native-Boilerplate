import filter from 'lodash/filter';
import forEach from 'lodash/forEach';
import has from 'lodash/has';
import isEmpty from 'lodash/isEmpty';
import startsWith from 'lodash/startsWith';
import { MMKV } from 'react-native-mmkv';
import { AppConst, MMKVKeyConst } from '@constants';
import { isWeb } from '@themes';
import { isPresentValue } from './StringUtils';
{% if state_management == 'React Redux' -%}
import type { Storage } from 'redux-persist';
{% endif -%}

/**
 * A wrapper around the MMKV class that provides a simple interface for storing and retrieving
 * data.
 */
export const storage = new MMKV({
  id: isWeb ? 'mmkv.default' : MMKVKeyConst.storage,
  encryptionKey: isWeb ? undefined : AppConst.encryptionKey
});

/**
 * A type that can be stored in localStorage.
 * @typedef {boolean | string | number | object} StorageStringType
 */
export type StorageStringType = boolean | string | number | object;

/**
 * "Get a value from storage, and if it doesn't exist, return the default value."
 * The function is generic, so you can pass in a string, number, boolean, or object as the default
 * value
 * @param {string} key - The key to store the value under.
 * @param {T} defaultValue - The default value to return if the key doesn't exist.
 * @returns {T} The return type is T, which is a generic type.
 */
export function getStorageString<T extends StorageStringType>(key: string, defaultValue: T): T {
  const value = storage.getString(key) ?? '';
  if (!isPresentValue(value)) {
    return defaultValue;
  } else if (typeof defaultValue === 'boolean') {
    return Boolean(value) as T;
  } else if (typeof defaultValue === 'string') {
    return String(value) as T;
  } else if (typeof defaultValue === 'number') {
    return Number(value) as T;
  }
  return JSON.parse(value);
}

/**
 * "This function sets a value in the local storage, and it accepts a string, boolean,
 * number, or object as the value."
 *
 * The first line of the function is a type guard. It checks to see if the value is a boolean, string,
 * or number. If it is, then the value is assigned to the value variable. If it isn't, then the value
 * is converted to a string and assigned to the value variable
 * @param {string} key - The key to store the value under.
 * @param {T} newValue - The new value to set.
 * @returns None
 */
export function setStorageString<T extends StorageStringType>(key: string, newValue: T): void {
  let value: string;
  if (
    typeof newValue === 'boolean' ||
    typeof newValue === 'string' ||
    typeof newValue === 'number'
  ) {
    value = newValue as string;
  } else {
    value = JSON.stringify(newValue);
  }
  storage.set(key, value);
}

{% if state_management == 'React Redux' -%}
export const reduxStorage: Storage = {
  setItem: (key: string, value: any) => {
    storage.set(key, value);
    return Promise.resolve(true);
  },
  getItem: (key: string) => {
    const value = storage.getString(key);
    return Promise.resolve(value);
  },
  removeItem: (key: string) => {
    storage.delete(key);
    return Promise.resolve();
  }
};
{% endif -%}

let dataMemory: Record<string, string | undefined> = {};
/**
 * Create storage class for aws amplify cache
 */
export class AWSAmplifyStorage {
  // the promise returned from sync function
  static syncPromise: Promise<boolean> | null = null;

  /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */
  static setItem(key: string, value: string): string | undefined {
    const originalKey: string = `${MMKVKeyConst.storageKeyPrefix}_${key}`;
    storage.set(originalKey, value);
    dataMemory[originalKey] = value;
    return dataMemory[originalKey];
  }

  /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */
  static getItem(key: string): string | undefined {
    const originalKey: string = `${MMKVKeyConst.storageKeyPrefix}_${key}`;
    const isLocalAvailable =
      has(dataMemory, originalKey) || Object.prototype.hasOwnProperty.call(dataMemory, originalKey);
    const isLocalStorageAvailable = storage.contains(originalKey);
    return isLocalAvailable
      ? dataMemory[originalKey]
      : isLocalStorageAvailable
      ? storage.getString(originalKey)
      : undefined;
  }

  /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */
  static removeItem(key: string): boolean {
    const originalKey: string = `${MMKVKeyConst.storageKeyPrefix}_${key}`;
    storage.delete(originalKey);
    return delete dataMemory[originalKey];
  }

  /**
   * This is used to clear the storage
   * @returns {string} nothing
   */
  static clear(): Record<string, string | undefined> {
    forEach(Object.keys({ ...dataMemory }), (key: string) => {
      storage.delete(key);
    });
    dataMemory = {};
    return dataMemory;
  }

  /**
   * If the storage operations are async(i.e AsyncStorage)
   * Then you need to sync those items into the memory in this method
   */
  static sync(): Promise<boolean> {
    if (!AWSAmplifyStorage.syncPromise) {
      AWSAmplifyStorage.syncPromise = new Promise((res, _) => {
        const keys: string[] = storage.getAllKeys();
        if (isEmpty(keys)) {
          res(true);
        } else {
          const originalKeys: string[] = filter(keys, (key: string) =>
            startsWith(key, `${MMKVKeyConst.storageKeyPrefix}_`)
          );
          forEach(originalKeys, (key: string) => {
            dataMemory[key] = storage.getString(key);
          });
          res(true);
        }
      });
    }
    return AWSAmplifyStorage.syncPromise;
  }
}
