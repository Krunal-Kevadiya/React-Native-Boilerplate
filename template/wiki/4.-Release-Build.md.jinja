There are three ways to release build. The first one is Manual/Local, second is CI/CD and third is Code Push.

## Let's start with Manual/Local generate a build.

1. Release build on Android platform
   1. Change directory `cd <Dir>` to the project directory
   1. Change directory to android `cd android`.
   1. Check hot-fix(CodePush) release for application on CI/CD under distribution menu([Microsoft app center](https://appcenter.ms/create-account)) if there is any codePush release or not. If codePush release is available then increase `versionCode` & `versionName` using [Environment setup mention step](./2.-Environment-Setup.md).
   1. Generating APK for the following command `./gradlew app:assembleRelease` OR Generating App Bundle for the following command `./gradlew app:bundleRelease`.
   1. After the completed process then APK file path is `android/app/build/outputs/apk/release/app-release.apk` OR App Bundle file path is `android/app/build/outputs/bundle/release/app.aab`
   1. Upload release builds in the Google Play store.
      <br/>[More Details Check This ](https://facebook.github.io/react-native/docs/signed-apk-android)
1. Release build on IOS platform
   1. Open the Xcode project by clicking on `{{project_name}}.xcworkspace`. (Path: `ios/{{project_name}}.xcworkspace`)
   1. Check hot-fix(CodePush) release for application on CI/CD under distribution menu([Microsoft app center](https://appcenter.ms/create-account)) if there is any codePush release or not. If codePush release is available then increase `versionCode` & `versionName` using [Environment setup mention step](./2.-Environment-Setup.md).
   1. Your app needs to run properly and be clean of errors (the red warnings)
   1. You should have added your code Signing and Team information set up in Xcode.
   1. To create the full app archive, you first need to select the `Generic iOS Device` from the list of simulators.
   1. Now go to `Product -> Archive` and let it bundle your app. This can be a pretty lengthy process depending on the size of your app.
   1. Once this is done, the Archive window will open and this is where you can manage all the archives generated by Xcode.
      <br/>Every time you select Archive in the menu, Xcode will bundle a new archive for App Store Connect.
      <br/>If you have duplicates or older ones, just delete them from this list.
   1. Now select the archive and choose `Distribute App`. You’ll be prompted to select the method of distribution.
   1. Once you have selected the iOS App Store, it will go over a couple of checks and validations to make sure you are not uploading a broken app.
      <br/>If something happens, there is a great chance Xcode will stop you here and you’ll have to go back to coding or adding missing assets like icons.
   1. If Xcode doesn’t find anything wrong with the archive, the upload process will follow. Once again the upload time will vary depending on the archive size and your internet connection.
   1. Once completed, you will see a final window like this. Congratulations! Your app is halfway there to the iOS App Store.
      <br/>[More Details Check This](https://codewithchris.com/submit-your-app-to-the-app-store/)

## Let's start with CI/CD to generate a build.

This project has implemented a CI/CD process for ios and android build releases. **Microsoft App center** is used for it, and the branch from which the builds are being generated is **DevelopBranch**.

1.  Marge all your branch with develop branch or make sure develop branch is up to date.
1.  Check hot-fix(CodePush) release for application on CI/CD under distribution menu([Microsoft app center](https://appcenter.ms/create-account)) if there is any codePush release or not.
1.  Create a new branch with a name like `release_build_v<Version>`, And version code is set based on 2 steps.
1.  Configure Environment setup with Production release mode [Step](./2.-Environment-Setup.md)
1.  Commit local change file on the current branch.
1.  Create a current branch pull request on **DevelopBranch** branch then marge it.
1.  When branch merged then auto trigger Microsoft AppCenter build request and start a generating build. After some time completed process then AppCenter upload builds on TestFlight & Google Play store respectively.

## Let's start with Code Push to generate a build.

1.  Make sure you have not added/changed/modified/deleted node module or performed any changes to iOS or Android native code. In such cases, codePush will not work since it can only work based on JS bundle.
1.  CodePush will work based on the local working directory so make sure your local directory contains all hot-fixes and environment is pointing to Production.
1.  The command to release hot-fixes by codePush for
    1. Ios: `appcenter codepush release-react -a Organization/Project-Ios -d Production`
    1. Android: `appcenter codepush release-react -a Organization/Project-Android -d Production`
